Local Development Setup:

  1. git clone [repository_url]
      cd [project_directory]

  2. Command to install all the dependencies
      yarn install

  3. Start Redis Server:
      redis-server
      
  4. Command to run the application
      yarn dev

  5. routeNames is the API name
      Path: src/routes/routeNames

  6. For mongodb connection
      6.1 Path: src/lib/mongo.ts
      6.2 Line of code :
          'mongodb+srv://hero:(user-name)@cluster0.daesock.mongodb.net/(collection-name)',

  7. For mongodb connection issue
      7.1 Go to the mongodb Atlas
      7.2 Update the IP Address

  8. Folder structure of this application:
      8.1 src
          8.1.1 chat
                8.1.1.1 index.ts
                8.1.1.2 socketEvents.ts
                8.1.1.3 verifyToken.ts
          8.1.2 controllers
                8.1.2.1 index.ts
          8.1.3 lib
                8.1.3.1 mongo.ts
          8.1.4 models
                8.1.4.1 Message.ts
          8.1.5 routes
                8.1.5.1 chat.ts
                8.1.5.2 index.ts
                8.1.5.3 routeNames.ts
                8.1.5.4 user.ts
          8.1.6 index.ts
      8.2 .env
      8.3 package.json
      8.4 tsconfig.json
      8.5 yarn.lock

  9. Environment for API url in postman rest api
      http://localhost:3000/api/v1



Production Deployment Setup:

  1.  git clone [repository_url]
      cd [project_directory]

  2.  Install Dependencies:
      yarn install --production

  3. Create .env file:
      3.1 Duplicate the .env.example file and rename it to .env.
      3.2 Fill in the necessary details, including the MongoDB connection URL, Redis details, and other production-related variables.

  4.  Build TypeScript Code:
      yarn build

  5. Start the Application with PM2:
      pm2 start process.json

      Note: Ensure process.json is configured correctly for your production environment.

  6.  Access the Production Application:
      The application should now be accessible at the specified production port (as defined in the .env file).


Local Development Setup:

    1. git clone [repository_url]
      cd [project_directory]

    2. Command to install all the dependencies
      yarn install

    3. Start Redis Server:
      redis-server
      
    4. Command to run the application
      yarn dev

    5. routeNames is the API name
      Path: src/routes/routeNames

    6. For mongodb connection
      6.1 Path: src/lib/mongo.ts
      6.2 Line of code :
          'mongodb+srv://hero:(user-name)@cluster0.daesock.mongodb.net/(collection-name)',

    7. For mongodb connection issue
      7.1 Go to the mongodb Atlas
      7.2 Update the IP Address

    8. Folder structure of this application:
      src
        ├── chat
        │   ├── index.ts
        │   ├── socketEvents.ts
        │   └── verifyToken.ts
        ├── controllers
        │   └── index.ts
        ├── lib
        │   └── mongo.ts
        ├── models
        │   └── Message.ts
        ├── routes
        │   ├── chat.ts
        │   ├── index.ts
        │   ├── routeNames.ts
        │   └── user.ts
        └── index.ts

    9.  Environment Details:

        Node.js Version: 18.17.0
        Yarn Version: 1.22.19
        NPM Version: 9.6.7
        
    10. Environment for API in Postman:

    URL: http://localhost:3000/api/v1



Production Deployment Setup:

  1.  git clone [repository_url]
      cd [project_directory]

  2.  Install Dependencies:
      yarn install --production

  3. Create .env file:
      3.1 Duplicate the .env.example file and rename it to .env.
      3.2 Fill in the necessary details, including the MongoDB connection URL, Redis details, and other production-related variables.

  4.  Build TypeScript Code:
      yarn build

  5. Start the Application with PM2:
      pm2 start process.json

      Note: Ensure process.json is configured correctly for your production environment.

  6.  Access the Production Application:
      The application should now be accessible at the specified production port (as defined in the .env file).

